@article{danialandjoel,
		author = "Daniel Bundala; Joel Ouaknine",
		title = "On parametric timed automata and one-counter machines",
		DOI = "http://doi.org/10.1016/j.ic.2016.07.011",
		journal = "Information and Computation",
		volume = "253, part 2",
		year = "2017",
		pages = "273-303",
		keywords = "Mathematics; Computer Science"
}

@article{informationprocessingletters,
	author = "Martin Fränzle; Karin Quaas; Mahsa Shirmohammadi; James Worrell",
	title = "Effective definability of the reachability relation in timed automata",
	DOI = "https://doi.org/10.1016/j.ipl.2019.105871",
	journal = "Information Processing Letters",
	volume = "153",
	year = "2020",
	keywords = "Mathematics; Computer Science"
}

@article{higherdimensionaltimedautomata,
	author = "Uli Fahrenberg",
	title = "Higher-Dimensional Timed Automata",
	DOI = "https://doi.org/10.1016/j.ifacol.2018.08.019",
	journal = "IFAC-PapersOnLine",
	volume = "51",
	year = "2018",
	pages = "109-114",
	keywords = "timed automatahigher-dimensional automatareal timenon-interleaving concurrencyhybrid automatastate-space explosion"
}

@proceedings{embeddedefficiency,
	author = {Silva; W and Brisolara; Lisane and Corrêa; Ulisses and Carro; Luigi},
	year = {2010},
	title = {Evaluation of the impact of code refactoring on embedded software efficiency},
	pages = {145-150},
	booktitle = {Proceedings of International Conference on Reliable Software Technologies}
}

@article{succintandparametriconecounter,
	author = {Haase C.; Kreutzer S.; Ouaknine J.; Worrell J.},
	title = {Reachability in Succinct and Parametric One-Counter Automata.},
	DOI = {https://doi.org/10.1007/978-3-642-04081-8_25},
	journal = {Lecture Notes in Computer Science},
	volume = {5710},
	year = {2009}
}

@article{713323,
	author={ {Yih-Fam Chen} and E. R. {Gansner} and E. {Koutsofios}},
	journal={IEEE Transactions on Software Engineering},
	title={A C++ data model supporting reachability analysis and dead code detection},
	year={1998},
	volume={24},
	number={9},
	pages={682-694},
	keywords={object-oriented languages;object-oriented programming;C language;reachability analysis;software libraries;software reusability;systems re-engineering;reverse engineering;inheritance;data structures;C++;data model;reachability analysis;dead code detection;software repository;program understanding;system reengineering;software project;reverse engineering tools;large software projects;regression tests;software reuse;language complexity;class inheritance;friendship;template instantiation;impact analysis;class visibility analysis;Reachability analysis;Relational databases;Reverse engineering;Data models;Information analysis;Software testing;Software maintenance;Software tools;Buildings;Tree graphs},
	DOI={10.1109/32.713323},
	ISSN={2326-3881},
}

@proceedings{10.1145/1292316.1292319,
	author = {Janota, Mikol\'{a}\v{s} and Grigore, Radu and Moskal, Michal},
	title = {Reachability Analysis for Annotated Code},
	year = {2007},
	isbn = {9781595937216},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1292316.1292319},
	doi = {10.1145/1292316.1292319},
	booktitle = {Proceedings of the 2007 Conference on Specification and Verification of Component-Based Systems: 6th Joint Meeting of the European Conference on Software Engineering and the ACM SIGSOFT Symposium on the Foundations of Software Engineering},
	pages = {23–30},
	numpages = {8},
	keywords = {JML, ESC/Java2},
	location = {Dubrovnik, Croatia},
	series = {SAVCBS ’07}
}


@article{FEARNLEY201526,
	title = "Reachability in two-clock timed automata is PSPACE-complete",
	journal = "Information and Computation",
	volume = "243",
	pages = "26 - 36",
	year = "2015",
	note = "40th International Colloquium on Automata, Languages and Programming (ICALP 2013)",
	issn = "0890-5401",
	doi = "https://doi.org/10.1016/j.ic.2014.12.004",
	url = "http://www.sciencedirect.com/science/article/pii/S0890540114001564",
	author = "John Fearnley and Marcin Jurdziński",
	keywords = "Timed automata, Counter automata, PSPACE-complete",
	abstract = "Recently, Haase, Ouaknine, and Worrell have shown that reachability in two-clock timed automata is log-space equivalent to reachability in bounded one-counter automata. We show that reachability in bounded one-counter automata is PSPACE-complete."
}
@article{blondin2021continuous,
	title={Continuous One-Counter Automata},
	author={Blondin, Michael and Leys, Tim and Mazowiecki, Filip and Oftermatt, Philip and P{\'e}rez, Guillermo A},
	journal={arXiv preprint arXiv:2101.11996},
	year={2021}
}

@InProceedings{10.1007/3-540-45848-4_57,
	author="Ellson, John
	and Gansner, Emden
	and Koutsofios, Lefteris
	and North, Stephen C.
	and Woodhull, Gordon",
	editor="Mutzel, Petra
	and J{\"u}nger, Michael
	and Leipert, Sebastian",
	title="Graphviz--- Open Source Graph Drawing Tools",
	booktitle="Graph Drawing",
	year="2002",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="483--484",
	abstract="Graphviz is a heterogeneous collection of graph drawing tools containing batch layout programs (dot, neato, fdp, twopi); a platform for incremental layout (Dynagraph); customizable graph editors (dotty, Grappa); a server for including graphs in Web pages (WebDot); support for graphs as COM objects (Montage); utility programs useful in graph visualization; and libraries for attributed graphs. The software is available under an Open Source license. The article[1] provides a detailed description of the package.",
	isbn="978-3-540-45848-7"
}

@article{10.1145/71605.71612,
	author = {Pokkunuri, B. P.},
	title = {Object Oriented Programming},
	year = {1989},
	issue_date = {Nov. 1989},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {24},
	number = {11},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/71605.71612},
	doi = {10.1145/71605.71612},
	abstract = {Object Oriented Programming (OOP) is being used quite widely in the fields of both
	software engineering and artificial intelligence. The aim of this article is to give
	an idea of OOP and its features. It includes an indication of the available OOP environments
	and the Object-Oriented extensions made to the conventional languages such as C and
	Pascal. Some of the advantages in the use of OOP are also described briefly.},
	journal = {SIGPLAN Not.},
	month = nov,
	pages = {96–101},
	numpages = {6}
}

@inproceedings{10.1145/2950290.2983934,
	author = {Wang, Yuepeng and Feng, Yu and Martins, Ruben and Kaushik, Arati and Dillig, Isil and Reiss, Steven P.},
	title = {Hunter: Next-Generation Code Reuse for Java},
	year = {2016},
	isbn = {9781450342186},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2950290.2983934},
	doi = {10.1145/2950290.2983934},
	abstract = { In many common scenarios, programmers need to implement functionality that is already
	provided by some third party library. This paper presents a tool called Hunter that
	facilitates code reuse by finding relevant methods in large code bases and automatically
	synthesizing any necessary wrapper code. Since Hunter internally uses advanced program
	synthesis technology, it can automatically reuse existing methods even when code adaptation
	is necessary. We have implemented Hunter as an Eclipse plug-in and evaluate it by
	(a) comparing it against S6, a state-of-the-art code reuse tool, and (b) performing
	a user study. Our evaluation shows that Hunter compares favorably with S6 and increases
	programmer productivity. },
	booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages = {1028–1032},
	numpages = {5},
	keywords = {code reuse, code adaptation, program synthesis},
	location = {Seattle, WA, USA},
	series = {FSE 2016}
}

@inproceedings{10.1145/178243.178256,
	author = {Knoop, Jens and R\"{u}thing, Oliver and Steffen, Bernhard},
	title = {Partial Dead Code Elimination},
	year = {1994},
	isbn = {089791662X},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/178243.178256},
	doi = {10.1145/178243.178256},
	abstract = {A new aggressive algorithm for the elimination of partially dead code is presented,
	i.e., of code which is only dead on some program paths. Besides being more powerful
	than the usual approaches to dead code elimination, this algorithm is optimal in the
	following sense: partially dead code remaining in the resulting program cannot be
	eliminated without changing the branching structure or the semantics of the program,
	or without impairing some program executions.Our approach is based on techniques for
	partial redundancy elimination. Besides some new technical problems there is a significant
	difference here: partial dead code elimination introduces second order effects, which
	we overcome by means of exhaustive motion and elimination steps. The optimality and
	the uniqueness of the program obtained is proved by means of a new technique which
	is universally applicable and particularly useful in the case of mutually interdependent
	program optimizations.},
	booktitle = {Proceedings of the ACM SIGPLAN 1994 Conference on Programming Language Design and Implementation},
	pages = {147–158},
	numpages = {12},
	keywords = {program optimization, data flow analysis, partial redundancy elimination, code motion, dead code elimination, bit-vector data flow analyses, assignment motion},
	location = {Orlando, Florida, USA},
	series = {PLDI '94}
}

@article{10.1145/773473.178256,
	author = {Knoop, Jens and R\"{u}thing, Oliver and Steffen, Bernhard},
	title = {Partial Dead Code Elimination},
	year = {1994},
	issue_date = {June 1994},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {29},
	number = {6},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/773473.178256},
	doi = {10.1145/773473.178256},
	abstract = {A new aggressive algorithm for the elimination of partially dead code is presented,
	i.e., of code which is only dead on some program paths. Besides being more powerful
	than the usual approaches to dead code elimination, this algorithm is optimal in the
	following sense: partially dead code remaining in the resulting program cannot be
	eliminated without changing the branching structure or the semantics of the program,
	or without impairing some program executions.Our approach is based on techniques for
	partial redundancy elimination. Besides some new technical problems there is a significant
	difference here: partial dead code elimination introduces second order effects, which
	we overcome by means of exhaustive motion and elimination steps. The optimality and
	the uniqueness of the program obtained is proved by means of a new technique which
	is universally applicable and particularly useful in the case of mutually interdependent
	program optimizations.},
	journal = {SIGPLAN Not.},
	month = jun,
	pages = {147–158},
	numpages = {12},
	keywords = {code motion, assignment motion, partial redundancy elimination, bit-vector data flow analyses, dead code elimination, data flow analysis, program optimization}
}

@inproceedings{10.1145/267895.267924,
	author = {Chen, Yih-Farn R. and Gansner, Emden R. and Koutsofios, Eleftherios},
	title = {A C++ Data Model Supporting Reachability Analysis and Dead Code Detection},
	year = {1997},
	isbn = {3540635319},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	url = {https://doi.org/10.1145/267895.267924},
	doi = {10.1145/267895.267924},
	booktitle = {Proceedings of the 6th European SOFTWARE ENGINEERING Conference Held Jointly with the 5th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages = {414–431},
	numpages = {18},
	location = {Zurich, Switzerland},
	series = {ESEC '97/FSE-5}
}

@article{10.1145/267896.267924,
	author = {Chen, Yih-Farn R. and Gansner, Emden R. and Koutsofios, Eleftherios},
	title = {A C++ Data Model Supporting Reachability Analysis and Dead Code Detection},
	year = {1997},
	issue_date = {Nov. 1997},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {22},
	number = {6},
	issn = {0163-5948},
	url = {https://doi.org/10.1145/267896.267924},
	doi = {10.1145/267896.267924},
	journal = {SIGSOFT Softw. Eng. Notes},
	month = nov,
	pages = {414–431},
	numpages = {18}
}


